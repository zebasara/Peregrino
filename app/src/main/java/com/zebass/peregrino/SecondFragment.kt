package com.zebass.peregrino

import android.Manifest
import android.annotation.SuppressLint
import android.content.BroadcastReceiver
import android.content.ClipData
import android.content.ClipboardManager
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.SharedPreferences
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.*
import android.graphics.drawable.BitmapDrawable
import android.location.Location
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.os.VibrationEffect
import android.os.Vibrator
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.EditText
import androidx.activity.result.contract.ActivityResultContracts
import androidx.annotation.RequiresApi
import androidx.core.content.ContextCompat
import androidx.core.content.edit
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import androidx.work.ExistingPeriodicWorkPolicy
import androidx.work.PeriodicWorkRequestBuilder
import androidx.work.WorkManager
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.android.material.snackbar.Snackbar
import com.zebass.peregrino.databinding.FragmentSecondBinding
import com.zebass.peregrino.service.AlertManager
import com.zebass.peregrino.service.TrackingService
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.collectLatest
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONObject
import org.osmdroid.config.Configuration
import org.osmdroid.tileprovider.tilesource.TileSourceFactory
import org.osmdroid.util.GeoPoint
import org.osmdroid.views.MapView
import org.osmdroid.views.overlay.Marker
import org.osmdroid.views.overlay.Polygon
import org.osmdroid.views.overlay.mylocation.GpsMyLocationProvider
import org.osmdroid.views.overlay.mylocation.MyLocationNewOverlay
import java.util.concurrent.TimeUnit
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.atomic.AtomicReference


class SecondFragment : Fragment() {

    // ============ BINDING Y PROPIEDADES CORE ============
    private var _binding: FragmentSecondBinding? = null
    private val binding get() = _binding ?: run {
        Log.w(TAG, "Binding accessed when null - fragment may be destroyed")
        throw IllegalStateException("Fragment binding is null - fragment destroyed")
    }
    private lateinit var sharedPreferences: SharedPreferences
    private val args: SecondFragmentArgs by navArgs()
    private val viewModel: TrackingViewModel by viewModels()

    // ============ MAPA Y OVERLAYS ============
    private var map: MapView? = null
    private val vehicleMarker = AtomicReference<Marker?>(null)
    private val safeZonePolygon = AtomicReference<Polygon?>(null)
    private var myLocationOverlay: MyLocationNewOverlay? = null

    // ============ WEBSOCKET Y NETWORKING ============
    private var webSocket: WebSocket? = null
    private val client: OkHttpClient by lazy {
        OkHttpClient.Builder()
            .connectTimeout(3, TimeUnit.SECONDS)
            .readTimeout(5, TimeUnit.SECONDS)
            .writeTimeout(3, TimeUnit.SECONDS)
            .pingInterval(30, TimeUnit.SECONDS)
            .retryOnConnectionFailure(true)
            .build()
    }

    // ============ ESTADO Y CONTROL ============
    private val shouldReconnect = AtomicBoolean(true)
    private val isMapReady = AtomicBoolean(false)
    private val lastPositionUpdate = AtomicLong(0)
    private val lastStatusCheck = AtomicLong(0)
    private val handler = Handler(Looper.getMainLooper())
    private var statusCheckRunnable: Runnable? = null
    private var reconnectRunnable: Runnable? = null

    // ============ NUEVAS VARIABLES PARA SEGUIMIENTO ============
    private val isFollowingVehicle = AtomicBoolean(false)
    private var currentVehicleState = VehicleState.NORMAL
    private var safeZoneCenter: GeoPoint? = null

    // ============ ENUMS Y CONSTANTES ============
    enum class VehicleState {
        NORMAL,        // Verde - funcionamiento normal
        IN_SAFE_ZONE,  // Azul - dentro de zona segura
        OUTSIDE_SAFE_ZONE // Rojo - fuera de zona segura
    }


    // ============ CACHE LOCAL ULTRA-R√ÅPIDO ============
    private data class LocalCache<T>(
        val data: AtomicReference<T?> = AtomicReference(null),
        val timestamp: AtomicLong = AtomicLong(0),
        val ttl: Long = 30_000L
    ) {
        fun set(value: T) {
            data.set(value)
            timestamp.set(System.currentTimeMillis())
        }

        fun get(): T? {
            val cached = data.get()
            return if (cached != null && (System.currentTimeMillis() - timestamp.get()) < ttl) {
                cached
            } else null
        }

        fun clear() {
            data.set(null)
            timestamp.set(0)
        }
    }

    private val deviceInfoCache = LocalCache<String>(ttl = 60_000L)
    private val safeZoneCache = LocalCache<GeoPoint>(ttl = 120_000L)
    private val lastPositionCache = LocalCache<GeoPoint>(ttl = 5_000L)

    // ----ALARMA-----
    private lateinit var alertManager: AlertManager

    companion object {
        var JWT_TOKEN: String? = ""
        private var safeZone: GeoPoint? = null

        // ============ CONSTANTES CORREGIDAS ============
        const val PREF_SAFEZONE_LAT = "safezone_lat"
        const val PREF_SAFEZONE_LON = "safezone_lon"
        const val DEVICE_ID_PREF = "associated_device_id"
        const val DEVICE_NAME_PREF = "associated_device_name"
        const val DEVICE_UNIQUE_ID_PREF = "associated_device_unique_id"
        const val GEOFENCE_RADIUS = 15.0
        const val RECONNECT_DELAY = 5000L
        const val STATUS_CHECK_INTERVAL = 30000L
        const val POSITION_UPDATE_THROTTLE = 1000L
        const val TAG = "SecondFragment"

        // ============ NUEVAS CONSTANTES PARA SEGUIMIENTO ============
        const val FOLLOW_ZOOM_LEVEL = 18.0
        const val OVERVIEW_ZOOM_LEVEL = 12.0
        const val TANDIL_LAT = -37.32167
        const val TANDIL_LON = -59.13316
    }

    private val locationPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        if (permissions[Manifest.permission.ACCESS_FINE_LOCATION] == true ||
            permissions[Manifest.permission.ACCESS_COARSE_LOCATION] == true
        ) {
            enableMyLocation()
        } else {
            showSnackbar("Permiso de ubicaci√≥n denegado", Snackbar.LENGTH_LONG)
            Log.e(TAG, "Permiso de ubicaci√≥n denegado")
        }
    }

    // ============ LIFECYCLE OPTIMIZADO ============

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?
    ): View {
        // ===== CONFIGURACI√ìN OSMDroid ANTES DE CREAR EL MAPA =====
        val ctx = requireContext()

        // Configurar cache de tiles m√°s grande para fluidez
        Configuration.getInstance().load(ctx, ctx.getSharedPreferences("osmdroid", 0))
        Configuration.getInstance().apply {
            // ===== CACHE OPTIMIZADO =====
            tileFileSystemCacheMaxBytes = 100L * 1024L * 1024L  // 100MB cache
            tileFileSystemCacheTrimBytes = 80L * 1024L * 1024L   // Limpiar a 80MB

            // ===== CONFIGURACI√ìN DE THREADS =====
            tileDownloadThreads = 8                              // M√°s threads para descargas
            tileFileSystemThreads = 4                            // Threads para acceso a archivos

            // ===== CONFIGURACI√ìN DE RED =====
            userAgentValue = "PeregrinoGPS/1.0"

            // ===== CONFIGURACI√ìN DE DEBUG =====
            isDebugMode = false                                  // Sin debug para mejor rendimiento
            isDebugTileProviders = false
        }

        _binding = FragmentSecondBinding.inflate(inflater, container, false)
        sharedPreferences = requireActivity().getSharedPreferences("user_prefs", Context.MODE_PRIVATE)
        viewModel.setContext(requireContext())
        return binding.root
    }

    private fun restoreDeviceFromPreferences(): Boolean {
        val prefs = requireContext().getSharedPreferences("user_prefs", Context.MODE_PRIVATE)

        val uniqueId = prefs.getString(DEVICE_UNIQUE_ID_PREF, null)
        val deviceName = prefs.getString(DEVICE_NAME_PREF, null)
        val deviceId = prefs.getInt(DEVICE_ID_PREF, -1)

        if (uniqueId != null && deviceName != null && deviceId != -1) {
            Log.d(TAG, "‚úÖ Device restored from preferences: uniqueId=$uniqueId, name=$deviceName")

            // Actualizar UI inmediatamente
            updateStatusUI("üì± $deviceName", android.R.color.holo_green_dark)

            return true
        } else {
            Log.w(TAG, "‚ùå No device found in preferences")
            return false
        }
    }
    // Fix en onViewCreated para mejor inicializaci√≥n
    @RequiresApi(Build.VERSION_CODES.O)
    @SuppressLint("MissingPermission")
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        // ‚úÖ LIMPIAR CACHES CORRUPTOS AL INICIO
        clearCorruptedCaches()

        // ‚úÖ RESTAURAR DISPOSITIVO INMEDIATAMENTE
        if (!restoreDeviceFromPreferences()) {
            updateStatusUI("Asocia un veh√≠culo para comenzar", android.R.color.darker_gray)
        }

        val userEmail = args.userEmail
        JWT_TOKEN = args.jwtToken
        Log.d(TAG, "üöÄ onViewCreated: userEmail=$userEmail, hasToken=${!JWT_TOKEN.isNullOrEmpty()}")

        // UI Setup inmediato
        binding.textUser.text = "Bienvenido: $userEmail"

        // Inicializaci√≥n secuencial para evitar race conditions
        lifecycleScope.launch {
            try {
                // 1. Setup UI first
                setupUI()

                // 2. Setup map
                setupMap()

                // 3. Setup ViewModel observers
                observeViewModel()

                // 4. Check and load device info
                delay(100) // Small delay
                loadDeviceInfo()

                // 5. If device exists, start services
                delay(200) // Another small delay
                if (hasAssociatedDevice()) {
                    Log.d(TAG, "‚úÖ Device found, starting services...")
                    viewModel.forceDataRefresh()
                    startServices()
                } else {
                    Log.d(TAG, "‚ö†Ô∏è No device associated, skipping service startup")
                    updateStatusUI("‚ö†Ô∏è Asocia un dispositivo para comenzar", android.R.color.holo_orange_dark)
                }

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error in onViewCreated", e)
                showSnackbar("‚ùå Error de inicializaci√≥n: ${e.message}", Snackbar.LENGTH_LONG)
            }
        }
        alertManager = AlertManager(requireContext())
    }

    private fun clearCorruptedCaches() {
        try {
            // Verificar integridad de datos
            val prefs = requireContext().getSharedPreferences("user_prefs", Context.MODE_PRIVATE)
            val uniqueId = prefs.getString(DEVICE_UNIQUE_ID_PREF, null)
            val deviceName = prefs.getString(DEVICE_NAME_PREF, null)
            val jwtToken = prefs.getString("jwt_token", null)

            if (uniqueId != null && deviceName != null && jwtToken != null) {
                Log.d(TAG, "‚úÖ Cache integrity OK")
                return
            }

            if (uniqueId == null || deviceName == null) {
                Log.w(TAG, "üßπ Incomplete device data detected, forcing refresh")

                // Limpiar todo para evitar estados inconsistentes
                prefs.edit {
                    remove(DEVICE_ID_PREF)
                    remove(DEVICE_NAME_PREF)
                    remove(DEVICE_UNIQUE_ID_PREF)
                    remove(PREF_SAFEZONE_LAT)
                    remove(PREF_SAFEZONE_LON)
                }

                // Limpiar caches locales
                deviceInfoCache.clear()
                safeZoneCache.clear()
                lastPositionCache.clear()
            }

        } catch (e: Exception) {
            Log.e(TAG, "Error checking cache integrity: ${e.message}")
        }
    }

    // Nueva funci√≥n para debug - verificar estado del dispositivo
    private fun debugDeviceState() {
        Log.d(TAG, "=== DEBUG DEVICE STATE ===")
        Log.d(TAG, "JWT_TOKEN: ${if (JWT_TOKEN.isNullOrEmpty()) "EMPTY" else "OK"}")
        Log.d(TAG, "hasAssociatedDevice: ${hasAssociatedDevice()}")

        val deviceId = sharedPreferences.getInt(DEVICE_ID_PREF, -1)
        val deviceName = sharedPreferences.getString(DEVICE_NAME_PREF, null)
        val deviceUniqueId = sharedPreferences.getString(DEVICE_UNIQUE_ID_PREF, null)

        Log.d(TAG, "Device ID (internal): $deviceId")
        Log.d(TAG, "Device Name: $deviceName")
        Log.d(TAG, "Device UniqueID: $deviceUniqueId")
        Log.d(TAG, "WebSocket connected: ${webSocket != null}")
        Log.d(TAG, "WebSocket ready state: ${webSocket?.let { it.hashCode() }}")
        Log.d(TAG, "Map ready: ${isMapReady.get()}")
        Log.d(TAG, "Vehicle marker exists: ${vehicleMarker.get() != null}")
        Log.d(TAG, "=========================")
    }
    // Agregar este debug call en checkDeviceStatus
    @RequiresApi(Build.VERSION_CODES.O)
    private fun checkDeviceStatus() {
        debugDeviceState()

        // USAR EL UNIQUE_ID REAL DE LAS PREFERENCIAS
        val deviceUniqueId = sharedPreferences.getString(DEVICE_UNIQUE_ID_PREF, null)
        if (deviceUniqueId == null) {
            showSnackbar("‚ùå No hay dispositivo asociado", Snackbar.LENGTH_SHORT)
            updateStatusUI("‚ùå No hay dispositivo asociado", android.R.color.holo_red_dark)
            return
        }

        Log.d(TAG, "üîç Checking device status for REAL uniqueId: $deviceUniqueId")

        // Throttling para evitar spam
        val now = System.currentTimeMillis()
        if (now - lastStatusCheck.get() < 5000L) {
            showSnackbar("‚è≥ Espera antes de verificar nuevamente", Snackbar.LENGTH_SHORT)
            return
        }
        lastStatusCheck.set(now)

        // UI feedback inmediato
        updateStatusUI("üîÑ Verificando estado del dispositivo...", android.R.color.darker_gray)

        // Usar uniqueId REAL
        viewModel.checkDeviceStatus(deviceUniqueId) { isOnline, message ->
            val statusIcon = if (isOnline) "üü¢" else "üî¥"
            val displayMessage = "$statusIcon $message"

            showSnackbar(
                displayMessage,
                if (isOnline) Snackbar.LENGTH_SHORT else Snackbar.LENGTH_LONG
            )

            updateStatusUI(
                displayMessage,
                if (isOnline) android.R.color.holo_green_dark else android.R.color.holo_red_dark
            )

            if (!isOnline) {
                handler.postDelayed({ showOfflineHelpDialog() }, 2000)
            }

            Log.d(TAG, "Device status check completed: $displayMessage")
        }
    }

    // ============ SETUP FUNCTIONS OPTIMIZADAS ============

    @RequiresApi(Build.VERSION_CODES.O)
    private suspend fun setupUI() = withContext(Dispatchers.Main) {
        binding.buttonLogout.setOnClickListener {
            logout()
        }
        setupButtons()
    }
    @SuppressLint("MissingPermission")
    private fun enableMyLocation() {
        if (!hasLocationPermission()) {
            locationPermissionLauncher.launch(
                arrayOf(
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION
                )
            )
            return
        }

        if (myLocationOverlay == null) {
            myLocationOverlay = MyLocationNewOverlay(
                GpsMyLocationProvider(requireContext()),
                map
            ).apply {
                enableMyLocation()
                disableFollowLocation()

                val drawable = ContextCompat.getDrawable(
                    requireContext(),
                    android.R.drawable.ic_menu_mylocation
                )
                val bitmap = (drawable as? BitmapDrawable)?.bitmap ?: run {
                    val bitmap = Bitmap.createBitmap(
                        drawable.intrinsicWidth,
                        drawable.intrinsicHeight,
                        Bitmap.Config.ARGB_8888
                    )
                    val canvas = Canvas(bitmap)
                    drawable.setBounds(0, 0, canvas.width, canvas.height)
                    drawable.draw(canvas)
                    bitmap
                }
                setPersonIcon(bitmap)

                setDrawAccuracyEnabled(true)
            }

            map?.overlays?.add(0, myLocationOverlay)
            Log.d(TAG, "üìç Personal location overlay configurado (sin auto-seguimiento)")
        }

        map?.invalidate()
        Log.d(TAG, "‚úÖ Ubicaci√≥n personal habilitada - navegaci√≥n libre mantenida")
    }



    @RequiresApi(Build.VERSION_CODES.O)
    private fun setupButtons() {
        with(binding) {
            // Bot√≥n de ubicaci√≥n con seguimiento del veh√≠culo
            buttonMyLocation.setOnClickListener {
                toggleVehicleFollowing()
            }

            // Long click para centrar en mi ubicaci√≥n
            buttonMyLocation.setOnLongClickListener {
                centerOnMyLocation()
                true
            }

            buttonZonaSegura.setOnClickListener { handleSafeZoneButton() }
            buttonZonaSeguraMain.setOnClickListener { handleSafeZoneButton() }
            buttonAssociateDevice.setOnClickListener { showAssociateDeviceDialog() }
            buttonDeviceStatus.setOnClickListener { checkDeviceStatus() }
            buttonShowConfig.setOnClickListener { showTraccarClientConfig() }

            // Actualizar texto del bot√≥n para reflejar nueva funcionalidad
            updateFollowButtonText()

            // Ocultar elementos no necesarios
            buttonDescargarOffline.visibility = View.GONE
            progressBarDownload.visibility = View.GONE
            // En setupButtons() despu√©s de los otros botones:
            binding.buttonDeviceStatus.setOnLongClickListener {
                // Long press para debug
                viewModel.debugSafeZoneState { debugInfo ->
                    MaterialAlertDialogBuilder(requireContext())
                        .setTitle("Debug Zona Segura")
                        .setMessage(debugInfo)
                        .setPositiveButton("OK", null)
                        .show()
                }
                true
            }
        }
        Log.d(TAG, "‚úÖ Botones configurados - Seguimiento veh√≠culo mejorado")
    }
    // ============ ACTUALIZACI√ìN DIN√ÅMICA DE ICONOS ============
    private fun updateMarkerIcon(marker: Marker, state: VehicleState) {
        // Crear bitmap personalizado con forma y color
        val size = 48 // Tama√±o en p√≠xeles
        val bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        val paint = Paint(Paint.ANTI_ALIAS_FLAG)

        // Color seg√∫n estado
        val color = when (state) {
            VehicleState.NORMAL -> Color.GREEN
            VehicleState.IN_SAFE_ZONE -> Color.BLUE
            VehicleState.OUTSIDE_SAFE_ZONE -> Color.RED
        }

        // Dibujar c√≠rculo de fondo blanco
        paint.color = Color.WHITE
        canvas.drawCircle(size / 2f, size / 2f, size / 2f - 2, paint)

        // Dibujar c√≠rculo principal de color
        paint.color = color
        canvas.drawCircle(size / 2f, size / 2f, size / 2f - 6, paint)

        // Dibujar punto central m√°s oscuro
        paint.color = when (state) {
            VehicleState.NORMAL -> Color.parseColor("#006400") // Verde oscuro
            VehicleState.IN_SAFE_ZONE -> Color.parseColor("#000080") // Azul oscuro
            VehicleState.OUTSIDE_SAFE_ZONE -> Color.parseColor("#8B0000") // Rojo oscuro
        }
        canvas.drawCircle(size / 2f, size / 2f, 8f, paint)

        // Aplicar el bitmap al marcador
        marker.icon = BitmapDrawable(requireContext().resources, bitmap)

        Log.d(TAG, "üé® Updated marker icon for state: $state with custom bitmap")
    }
    // ============ NUEVA FUNCI√ìN PARA ALTERNAR SEGUIMIENTO ============
    private fun toggleVehicleFollowing() {
        if (vehicleMarker.get() == null) {
            showSnackbar("‚ö†Ô∏è No hay veh√≠culo para seguir", Snackbar.LENGTH_SHORT)
            return
        }

        val wasFollowing = isFollowingVehicle.get()
        isFollowingVehicle.set(!wasFollowing)

        if (isFollowingVehicle.get()) {
            // Activar seguimiento - centrar en veh√≠culo
            vehicleMarker.get()?.position?.let { position ->
                map?.controller?.animateTo(position, FOLLOW_ZOOM_LEVEL, 1000L)
                showSnackbar("üéØ Siguiendo al veh√≠culo", Snackbar.LENGTH_SHORT)
                Log.d(TAG, "üéØ Vehicle following activated")
            }
        } else {
            // Desactivar seguimiento - vista general de Tandil
            val tandilPosition = GeoPoint(TANDIL_LAT, TANDIL_LON)
            map?.controller?.animateTo(tandilPosition, OVERVIEW_ZOOM_LEVEL, 1000L)
            showSnackbar("üó∫Ô∏è Vista general activada", Snackbar.LENGTH_SHORT)
            Log.d(TAG, "üó∫Ô∏è Vehicle following deactivated - overview mode")
        }

        updateFollowButtonText()
    }

    private fun updateFollowButtonText() {
        binding.buttonMyLocation.text = if (isFollowingVehicle.get()) {
            "üéØ Siguiendo"
        } else {
            "üìç Ubicaci√≥n"
        }
    }
    // AGREGAR esta funci√≥n nueva en SecondFragment.kt
    private fun refreshJWTToken() {
        val userEmail = args.userEmail

        // ‚úÖ INTENTAR OBTENER PASSWORD DE PREFERENCIAS
        val userPassword = sharedPreferences.getString("user_password", null)

        if (userPassword == null) {
            Log.e(TAG, "‚ùå No password saved - cannot refresh token")
            forceLogout()
            return
        }

        Log.d(TAG, "üîÑ Refreshing JWT token for user: $userEmail")

        lifecycleScope.launch {
            try {
                val json = JSONObject().apply {
                    put("email", userEmail)
                    put("password", userPassword)
                }

                val requestBody = json.toString().toRequestBody("application/json".toMediaType())

                val request = Request.Builder()
                    .url("https://carefully-arriving-shepherd.ngrok-free.app/api/auth/login")
                    .post(requestBody)
                    .build()

                val response = client.newCall(request).execute()

                if (response.isSuccessful) {
                    val responseBody = response.body?.string()
                    val responseJson = JSONObject(responseBody ?: "")
                    val newToken = responseJson.getString("token")

                    // ‚úÖ ACTUALIZAR TOKEN GLOBALMENTE
                    JWT_TOKEN = newToken

                    // ‚úÖ GUARDAR EN PREFERENCIAS
                    sharedPreferences.edit {
                        putString("jwt_token", newToken)
                    }

                    Log.d(TAG, "‚úÖ JWT token refreshed successfully")
                    showSnackbar("‚úÖ Token renovado autom√°ticamente", Snackbar.LENGTH_SHORT)

                    // ‚úÖ REINICIAR SERVICIOS CON NUEVO TOKEN
                    setupWebSocket()

                } else {
                    Log.e(TAG, "‚ùå Token refresh failed: ${response.code}")
                    forceLogout()
                }

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Failed to refresh token: ${e.message}")
                forceLogout()
            }
        }
    }

    // ‚úÖ NUEVA FUNCI√ìN PARA LOGOUT FORZADO
    private fun forceLogout() {
        Log.d(TAG, "üö™ Forcing logout due to authentication failure")

        sharedPreferences.edit {
            remove("jwt_token")
            remove("user_email")
            remove("user_password") // Tambi√©n limpiar password
            remove(DEVICE_ID_PREF)
            remove(DEVICE_NAME_PREF)
            remove(DEVICE_UNIQUE_ID_PREF)
        }

        // ‚úÖ LIMPIAR ESTADO
        shouldReconnect.set(false)
        cancelStatusCheck()
        webSocket?.close(1000, "Force logout")

        findNavController().navigate(R.id.action_SecondFragment_to_FirstFragment)
        showSnackbar("Sesi√≥n expirada. Inicia sesi√≥n nuevamente.", Snackbar.LENGTH_LONG)
    }
    // ============ FIX 10: Nueva funci√≥n para centrar en ubicaci√≥n personal ============
    private suspend fun setupMap() = withContext(Dispatchers.Main) {
        map = binding.mapView.apply {
            setTileSource(TileSourceFactory.MAPNIK)
            setMultiTouchControls(true)
            controller.setZoom(16.0)
            controller.setCenter(GeoPoint(-37.32167, -59.13316))

            isTilesScaledToDpi = true
            setUseDataConnection(true)

            isFlingEnabled = true
            setMultiTouchControls(true)
            setBuiltInZoomControls(false)

            minZoomLevel = 3.0
            maxZoomLevel = 21.0

            isHorizontalMapRepetitionEnabled = false
            isVerticalMapRepetitionEnabled = false
            setScrollableAreaLimitDouble(null)

            overlayManager.tilesOverlay.setLoadingBackgroundColor(android.graphics.Color.TRANSPARENT)
            overlayManager.tilesOverlay.setLoadingLineColor(android.graphics.Color.TRANSPARENT)

            setMapListener(object : org.osmdroid.events.MapListener {
                override fun onScroll(event: org.osmdroid.events.ScrollEvent?): Boolean {
                    return true
                }

                override fun onZoom(event: org.osmdroid.events.ZoomEvent?): Boolean {
                    return true
                }
            })
        }

        isMapReady.set(true)
        Log.d(TAG, "üó∫Ô∏è Mapa configurado para navegaci√≥n S√öPER FLUIDA")
        Log.d(TAG, "üìè Zoom range: ${map?.minZoomLevel} - ${map?.maxZoomLevel}")
        Log.d(TAG, "üí® Fling enabled: ${map?.isFlingEnabled}")

        loadSafeZone()
        if (hasAssociatedDevice()) {
            viewModel.fetchSafeZoneFromServer()
        }

        if (hasLocationPermission()) {
            enableMyLocation()
        }
    }


    // Fix en hasAssociatedDevice para mejor validation
    private fun hasAssociatedDevice(): Boolean {
        val prefs = requireContext().getSharedPreferences("user_prefs", Context.MODE_PRIVATE)
        val uniqueId = prefs.getString(DEVICE_UNIQUE_ID_PREF, null)
        val deviceName = prefs.getString(DEVICE_NAME_PREF, null)

        val hasDevice = !uniqueId.isNullOrEmpty() && !deviceName.isNullOrEmpty()

        if (hasDevice) {
            Log.d(TAG, "‚úÖ Device found: uniqueId=$uniqueId, name=$deviceName")
        } else {
            Log.w(TAG, "‚ùå No associated device found")
        }

        return hasDevice
    }
    private fun observeViewModel() {
        // Observar posici√≥n del veh√≠culo
        lifecycleScope.launch {
            viewModel.vehiclePosition.collectLatest { position ->
                Log.d(TAG, "üîç Vehicle position observer triggered: $position")
                position?.let {
                    if (shouldUpdatePosition()) {
                        Log.d(TAG, "üöó Vehicle position from ViewModel: deviceId=${it.first}, position=${it.second}")
                        updateVehiclePosition(it.first, GeoPoint(it.second.latitude, it.second.longitude))
                        lastPositionUpdate.set(System.currentTimeMillis())
                    } else {
                        Log.d(TAG, "‚è≥ Vehicle position update throttled")
                    }
                } ?: run {
                    Log.d(TAG, "‚ùå Vehicle position is null")
                }
            }
        }

        // CR√çTICO: Observar zona segura con manejo de eliminaci√≥n mejorado
        lifecycleScope.launch {
            viewModel.safeZone.collectLatest { zone ->
                Log.d(TAG, "üõ°Ô∏è Safe zone update from ViewModel: $zone")

                if (zone != null) {
                    val geoPoint = GeoPoint(zone.latitude, zone.longitude)
                    safeZone = geoPoint
                    safeZoneCache.set(geoPoint)
                    updateSafeZoneUI(geoPoint)
                    Log.d(TAG, "‚úÖ Safe zone activated")
                } else {
                    // ZONA SEGURA ELIMINADA - limpiar completamente
                    Log.d(TAG, "üóëÔ∏è Safe zone deleted - clearing UI completely")

                    safeZone = null
                    safeZoneCache.clear()

                    // Remover pol√≠gono del mapa
                    safeZonePolygon.get()?.let {
                        map?.overlays?.remove(it)
                        Log.d(TAG, "üóëÔ∏è Removed safe zone polygon from map")
                    }
                    safeZonePolygon.set(null)

                    // FORZAR bot√≥n inactivo
                    updateSafeZoneButton(false)

                    // Limpiar preferencias
                    sharedPreferences.edit {
                        remove(PREF_SAFEZONE_LAT)
                        remove(PREF_SAFEZONE_LON)
                    }

                    map?.postInvalidate()
                    Log.d(TAG, "‚úÖ Safe zone UI cleared completely")
                }
            }
        }

        // Observar errores
        lifecycleScope.launch {
            viewModel.error.collectLatest { error ->
                error?.let {
                    showSnackbar(it, Snackbar.LENGTH_LONG)
                    Log.e(TAG, "‚ùå Error from ViewModel: $it")
                    if (it.contains("401")) {
                        handleUnauthorizedError()
                    }
                }
            }
        }

        // Observar informaci√≥n del dispositivo
        lifecycleScope.launch {
            viewModel.deviceInfo.collectLatest { info ->
                info?.let {
                    deviceInfoCache.set(it)
                    updateDeviceInfoUI(it)
                    Log.d(TAG, "üì± Device info updated: $it")
                }
            }
        }
    }


    // ============ SERVICIOS OPTIMIZADOS ============

    @RequiresApi(Build.VERSION_CODES.O)
    private suspend fun startServices() = withContext(Dispatchers.IO) {
        launch { startTrackingService() }
        launch { setupWebSocket() }
        launch { schedulePeriodicSync() }
        launch {
            // Peque√±o delay para asegurar que WebSocket est√© conectado
            delay(1000)
            fetchInitialPosition()
        }
        launch {
            // Delay m√°s grande para status check
            delay(2000)
            startPeriodicStatusCheck()
        }
    }



    // REEMPLAZAR la funci√≥n startTrackingService completa
    private fun startTrackingService() {
        if (!hasAssociatedDevice()) {
            Log.e(TAG, "‚ùå No associated device for TrackingService")
            return
        }

        val deviceUniqueId = sharedPreferences.getString(DEVICE_UNIQUE_ID_PREF, null)
        if (deviceUniqueId == null) {
            Log.e(TAG, "‚ùå No deviceUniqueId for TrackingService")
            return
        }

        // ‚úÖ OBTENER DEVICE_ID TAMBI√âN (NECESARIO PARA EL SERVICIO)
        val deviceId = sharedPreferences.getInt(DEVICE_ID_PREF, -1)

        Log.d(TAG, "üöÄ Starting TrackingService with:")
        Log.d(TAG, "   deviceUniqueId: $deviceUniqueId")
        Log.d(TAG, "   deviceId: $deviceId")
        Log.d(TAG, "   jwtToken: ${if (JWT_TOKEN.isNullOrEmpty()) "MISSING" else "OK"}")

        val intent = Intent(requireContext(), TrackingService::class.java).apply {
            putExtra("jwtToken", JWT_TOKEN)
            putExtra("deviceUniqueId", deviceUniqueId)
            putExtra("deviceId", deviceId) // ‚úÖ AGREGAR ESTE EXTRA
        }

        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                requireContext().startForegroundService(intent)
            } else {
                requireContext().startService(intent)
            }
            Log.d(TAG, "‚úÖ TrackingService iniciado correctamente")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error starting TrackingService: ${e.message}")
            showSnackbar("‚ùå Error iniciando servicio de rastreo", Snackbar.LENGTH_LONG)
        }
    }

    private fun schedulePeriodicSync() {
        val syncWork = PeriodicWorkRequestBuilder<SyncWorker>(15, TimeUnit.MINUTES)
            .addTag("sync_work")
            .build()

        WorkManager.getInstance(requireContext())
            .enqueueUniquePeriodicWork(
                "sync_work",
                ExistingPeriodicWorkPolicy.KEEP,
                syncWork
            )
        Log.d(TAG, "Sincronizaci√≥n peri√≥dica programada")
    }

    // ============ WEBSOCKET ULTRA-OPTIMIZADO ============
    private fun getCurrentTime(): String {
        val sdf = java.text.SimpleDateFormat("HH:mm:ss", java.util.Locale.getDefault())
        return sdf.format(java.util.Date())
    }
    // Fix en fetchInitialPosition con mejor error handling
    @RequiresApi(Build.VERSION_CODES.O)
    private fun fetchInitialPosition() {
        if (!hasAssociatedDevice()) {
            Log.w(TAG, "‚ö†Ô∏è No associated device for initial position fetch")
            return
        }

        // USAR EL UNIQUE_ID REAL DE LAS PREFERENCIAS
        val deviceUniqueId = sharedPreferences.getString(DEVICE_UNIQUE_ID_PREF, null)
        if (deviceUniqueId == null) {
            Log.e(TAG, "‚ùå No device uniqueId found in preferences")
            updateStatusUI("‚ùå No se encontr√≥ ID √∫nico del dispositivo", android.R.color.holo_red_dark)
            return
        }

        Log.d(TAG, "üìç Fetching initial position for device uniqueId: $deviceUniqueId")

        // Check cache primero usando uniqueId REAL
        lastPositionCache.get()?.let { cached ->
            Log.d(TAG, "‚úÖ Using cached position for uniqueId: $deviceUniqueId")
            updateVehiclePosition(deviceUniqueId.toIntOrNull() ?: deviceUniqueId.hashCode(), cached)
            return
        }

        lifecycleScope.launch {
            try {
                updateStatusUI("üîÑ Obteniendo posici√≥n inicial...", android.R.color.darker_gray)

                // Pasar uniqueId REAL al ViewModel
                val position = viewModel.getLastPosition(deviceUniqueId)
                val geoPoint = GeoPoint(position.latitude, position.longitude)
                val timestampStr = position.timestamp
                try {
                    val timestamp = if (!timestampStr.isNullOrEmpty()) {
                        java.time.Instant.parse(timestampStr).toEpochMilli()
                    } else {
                        System.currentTimeMillis()
                    }
                    val minutesOld = (System.currentTimeMillis() - timestamp) / 1000 / 60
                    val absMinutesOld = kotlin.math.abs(minutesOld)
                    if (absMinutesOld > 60) { // 1 hora m√°ximo
                        Log.w(TAG, "‚ùå Position timestamp issue for deviceUniqueId=$deviceUniqueId, $minutesOld minutes difference")
                        updateStatusUI("‚ùå Problema de timestamp - verifica configuraci√≥n", android.R.color.holo_red_dark)
                        return@launch
                    }

                    if (absMinutesOld > 15) { // Advertir pero continuar
                        Log.w(TAG, "‚ö†Ô∏è Position getting old for deviceUniqueId=$deviceUniqueId, $minutesOld minutes but processing")
                    }
                } catch (e: Exception) {
                    Log.w(TAG, "‚ö†Ô∏è No se pudo parsear el timestamp: $timestampStr, asumiendo posici√≥n reciente")
                }

                Log.d(TAG, "‚úÖ Initial position fetched for uniqueId $deviceUniqueId: lat=${position.latitude}, lon=${position.longitude}")
                updateVehiclePosition(deviceUniqueId.toIntOrNull() ?: deviceUniqueId.hashCode(), geoPoint)

                updateStatusUI("‚úÖ Posici√≥n inicial cargada", android.R.color.holo_green_dark)

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Failed to fetch initial position for uniqueId $deviceUniqueId", e)
                val errorMsg = when {
                    e.message?.contains("404") == true -> "No hay posiciones disponibles para este dispositivo"
                    e.message?.contains("403") == true -> "Dispositivo no autorizado"
                    e.message?.contains("401") == true -> "Token de autenticaci√≥n inv√°lido"
                    else -> "Error al obtener posici√≥n inicial: ${e.message}"
                }

                showSnackbar("‚ùå $errorMsg", Snackbar.LENGTH_LONG)
                updateStatusUI("‚ùå $errorMsg", android.R.color.holo_red_dark)

                if (e.message?.contains("401") == true) {
                    handleUnauthorizedError()
                }
            }
        }
    }

    // Fix en setupWebSocket con mejor manejo de errores
    private fun setupWebSocket() {
        if (JWT_TOKEN.isNullOrEmpty()) {
            Log.e(TAG, "‚ùå JWT_TOKEN is null or empty")
            showSnackbar("‚ùå Token de autenticaci√≥n faltante. Inicia sesi√≥n nuevamente.", Snackbar.LENGTH_LONG)
            handleUnauthorizedError()
            return
        }

        val deviceUniqueId = getDeviceUniqueId()
        if (deviceUniqueId == null) {
            Log.e(TAG, "‚ùå No device uniqueId for WebSocket connection")
            updateStatusUI("‚ö†Ô∏è No hay dispositivo asociado", android.R.color.holo_orange_dark)
            return
        }

        Log.d(TAG, "üîó Setting up WebSocket for device uniqueId: $deviceUniqueId")

        // Cancel any existing reconnect
        cancelReconnect()

        // Close existing connection
        webSocket?.close(1000, "Reconnecting")
        webSocket = null

        val wsUrl = "wss://carefully-arriving-shepherd.ngrok-free.app/ws?token=$JWT_TOKEN"
        Log.d(TAG, "üîó WebSocket URL: ${wsUrl.replace(JWT_TOKEN ?: "", "***TOKEN***")}")

        val request = Request.Builder()
            .url(wsUrl)
            .header("Origin", "https://carefully-arriving-shepherd.ngrok-free.app")
            .build()

        updateStatusUI("üîÑ Conectando WebSocket...", android.R.color.darker_gray)
        webSocket = client.newWebSocket(request, createWebSocketListener(deviceUniqueId))
    }


    // Fix en handlePositionUpdate con mejor logging
    // REEMPLAZAR la funci√≥n handlePositionUpdate
    @RequiresApi(Build.VERSION_CODES.O)
    private fun handlePositionUpdate(json: JSONObject, expectedDeviceUniqueId: String) {
        try {
            val data = json.getJSONObject("data")
            val deviceId = data.getString("deviceId")
            val lat = data.getDouble("latitude")
            val lon = data.getDouble("longitude")
            val timestampStr = data.optString("timestamp", "")

            Log.d(TAG, "üì® WebSocket position update:")
            Log.d(TAG, "   DeviceId: $deviceId")
            Log.d(TAG, "   Expected: $expectedDeviceUniqueId")
            Log.d(TAG, "   Position: $lat, $lon")
            Log.d(TAG, "   Timestamp: $timestampStr")

            // ‚úÖ VERIFICAR DISPOSITIVO CORRECTO
            if (deviceId != expectedDeviceUniqueId) {
                Log.w(TAG, "‚ùå Position for wrong device: received=$deviceId, expected=$expectedDeviceUniqueId")
                return
            }

            // ‚úÖ TIMESTAMP PARSING MEJORADO
            val timestamp = try {
                when {
                    timestampStr.isEmpty() -> System.currentTimeMillis()
                    timestampStr.contains('T') -> {
                        java.time.Instant.parse(timestampStr).toEpochMilli()
                    }
                    timestampStr.all { it.isDigit() } -> {
                        val ts = timestampStr.toLong()
                        if (ts < 9999999999L) ts * 1000L else ts
                    }
                    else -> System.currentTimeMillis()
                }
            } catch (e: Exception) {
                Log.w(TAG, "‚ö†Ô∏è Timestamp parse error, using current time: ${e.message}")
                System.currentTimeMillis()
            }

            // ‚úÖ VALIDACI√ìN DE EDAD M√ÅS PERMISIVA
            val ageMinutes = (System.currentTimeMillis() - timestamp) / 60000L
            if (ageMinutes > 30) {
                Log.w(TAG, "‚ö†Ô∏è Old position (${ageMinutes} min) but processing anyway...")
            }

            lifecycleScope.launch(Dispatchers.Main) {
                if (shouldUpdatePosition()) {
                    Log.d(TAG, "üîÑ Updating vehicle position from WebSocket")
                    val geoPoint = GeoPoint(lat, lon)

                    // ‚úÖ ACTUALIZAR VIEWMODEL Y UI
                    viewModel.updateVehiclePosition(deviceId, geoPoint, timestamp)
                    updateVehiclePosition(deviceId.hashCode(), geoPoint)

                    lastPositionUpdate.set(System.currentTimeMillis())
                    updateStatusUI("üü¢ Actualizado: ${getCurrentTime()}", android.R.color.holo_green_dark)

                    Log.d(TAG, "‚úÖ Position update completed successfully")
                } else {
                    Log.d(TAG, "‚è≥ Position update throttled")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error handling position update: ${e.message}", e)
            Log.e(TAG, "‚ùå Raw JSON: $json")
        }
    }

    private fun scheduleReconnect() {
        cancelReconnect()
        reconnectRunnable = Runnable {
            if (shouldReconnect.get() && isAdded) {
                Log.d(TAG, "Reconectando WebSocket...")
                setupWebSocket()
            }
        }
        handler.postDelayed(reconnectRunnable!!, RECONNECT_DELAY)
    }

    private fun cancelReconnect() {
        reconnectRunnable?.let { handler.removeCallbacks(it) }
        reconnectRunnable = null
    }

    // ============ UI UPDATES OPTIMIZADAS ============

    private fun updateVehiclePosition(deviceId: Int, position: GeoPoint) {
        if (!isMapReady.get()) return

        Log.d(TAG, "üéØ Updating vehicle position: deviceId=$deviceId")

        lastPositionCache.set(position)

        // Verificar zona segura ANTES de actualizar el marcador
        val newState = determineVehicleState(position)
        currentVehicleState = newState

        // ===== GESTI√ìN DE MARCADOR OPTIMIZADA =====
        var marker = vehicleMarker.get()
        if (marker == null) {
            // Primera vez - crear marcador
            marker = createVehicleMarker(deviceId, position, newState)
            vehicleMarker.set(marker)
            map?.overlays?.add(marker)

            // Solo centrar en el primer marcador si no estamos siguiendo
            if (!isFollowingVehicle.get()) {
                map?.controller?.animateTo(position, 16.0, 1000L)
            }
            Log.d(TAG, "‚úÖ Created vehicle marker and centered (first time only)")

        } else {
            // Actualizaciones - mover marcador y actualizar icono
            updateMarkerPosition(marker, deviceId, position, newState)
            // AGREGAR ESTA L√çNEA para forzar actualizaci√≥n visual:
            map?.invalidate() // Forzar redibujado del mapa
            Log.d(TAG, "‚úÖ Updated vehicle marker position")
        }

        // Si estamos siguiendo al veh√≠culo, mantener centrado
        if (isFollowingVehicle.get()) {
            map?.controller?.animateTo(position, FOLLOW_ZOOM_LEVEL, 800L)
            Log.d(TAG, "üéØ Following vehicle - map centered on new position")
        }

        // Verificar zona segura para alertas
        checkSafeZone(position, deviceId)

        // ===== INVALIDACI√ìN OPTIMIZADA =====
        map?.invalidate()
    }

    private fun determineVehicleState(vehiclePosition: GeoPoint): VehicleState {
        val safeZoneCenter = safeZoneCenter

        return if (safeZoneCenter != null) {
            val distance = safeZoneCenter.distanceToAsDouble(vehiclePosition)
            if (distance <= GEOFENCE_RADIUS) {
                VehicleState.IN_SAFE_ZONE
            } else {
                VehicleState.OUTSIDE_SAFE_ZONE
            }
        } else {
            VehicleState.NORMAL
        }
    }


    private fun createVehicleMarker(deviceId: Int, position: GeoPoint, state: VehicleState): Marker {
        return Marker(map).apply {
            this.position = position
            setAnchor(0.5f, 1.0f) // Centro-abajo para mejor visibilidad

            // Configurar icono seg√∫n estado
            updateMarkerIcon(this, state)

            title = formatMarkerTitle(deviceId, position)
            isDraggable = false
            setInfoWindow(null) // Sin info window para mejor rendimiento
            alpha = 1.0f // Totalmente opaco para m√°xima visibilidad
        }
    }

    private fun updateMarkerPosition(marker: Marker, deviceId: Int, position: GeoPoint, state: VehicleState) {
        marker.position = position
        marker.title = formatMarkerTitle(deviceId, position)
        updateMarkerIcon(marker, state)
    }


    private fun formatMarkerTitle(deviceId: Int, position: GeoPoint): String {
        return "Veh√≠culo ID: $deviceId\nLat: ${"%.6f".format(position.latitude)}\nLon: ${"%.6f".format(position.longitude)}"
    }

    private fun checkSafeZone(position: GeoPoint, deviceId: Int) {
        safeZoneCenter?.let { center ->
            // Usar distancia m√°s precisa
            val distance = calculateAccurateDistance(center, position)

            Log.d(TAG, "üìè Distance to safe zone: ${String.format("%.2f", distance)}m")

            if (distance > GEOFENCE_RADIUS) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    triggerAlarm(deviceId, distance)
                }
                Log.d(TAG, "üö® Vehicle outside safe zone: ${String.format("%.1f", distance)}m")
            } else {
                Log.d(TAG, "‚úÖ Vehicle inside safe zone: ${String.format("%.1f", distance)}m")
            }
        }
    }

    // ============ C√ÅLCULO DE DISTANCIA M√ÅS PRECISO ============
    private fun calculateAccurateDistance(point1: GeoPoint, point2: GeoPoint): Double {
        val results = FloatArray(1)
        Location.distanceBetween(
            point1.latitude, point1.longitude,
            point2.latitude, point2.longitude,
            results
        )
        return results[0].toDouble()
    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun triggerAlarm(deviceId: Int, distance: Double) {
        // Vibraci√≥n r√°pida como feedback inicial
        val vibrator = requireContext().getSystemService(Context.VIBRATOR_SERVICE) as Vibrator
        vibrator.vibrate(VibrationEffect.createOneShot(500, VibrationEffect.DEFAULT_AMPLITUDE))

        // Activar alarma cr√≠tica con sonido
        alertManager.startCriticalAlert(deviceId, distance)

        showSnackbar(
            "¬°ALERTA! El veh√≠culo $deviceId est√° a ${"%.1f".format(distance)} metros",
            Snackbar.LENGTH_LONG
        )
    }
    private fun stopAlarmIfActive() {
        if (::alertManager.isInitialized) {
            alertManager.stopAlert()
        }
    }

    private fun updateSafeZoneUI(position: GeoPoint) {
        if (!isMapReady.get()) return

        Log.d(TAG, "üõ°Ô∏è Updating safe zone UI at position: lat=${position.latitude}, lon=${position.longitude}")

        // Guardar centro de zona segura
        safeZoneCenter = position

        // Remover pol√≠gono anterior
        safeZonePolygon.get()?.let {
            map?.overlays?.remove(it)
            Log.d(TAG, "üóëÔ∏è Removed previous safe zone polygon")
        }

        // Crear nuevo pol√≠gono m√°s visible
        val polygon = Polygon().apply {
            points = Polygon.pointsAsCircle(position, GEOFENCE_RADIUS)
            fillColor = 0x33007FFF // Azul semi-transparente m√°s visible
            strokeColor = Color.BLUE
            strokeWidth = 4f // L√≠nea m√°s gruesa
        }

        safeZonePolygon.set(polygon)
        map?.overlays?.add(polygon)
        Log.d(TAG, "‚úÖ Added new safe zone polygon")

        // Actualizar bot√≥n
        updateSafeZoneButton(true)

        // Solo centrar si no estamos siguiendo veh√≠culo
        if (!isFollowingVehicle.get()) {
            val currentCenter = map?.mapCenter
            val currentDistance = currentCenter?.let {
                GeoPoint(it.latitude, it.longitude).distanceToAsDouble(position)
            } ?: Double.MAX_VALUE

            if (currentDistance > 2000.0) { // Solo si estamos muy lejos (2km+)
                Log.d(TAG, "üìç Centering map on safe zone (far away)")
                map?.controller?.animateTo(position, 17.0, 500L)
            }
        }

        map?.invalidate()
        Log.d(TAG, "‚úÖ Safe zone UI updated completely")
    }




    private fun updateSafeZoneButton(active: Boolean) {
        Log.d(TAG, "üîò Updating safe zone button: active=$active")

        binding.buttonZonaSegura.apply {
            text = if (active) "Zona Segura Activa ‚úì" else "Establecer Zona Segura"
            setBackgroundColor(
                ContextCompat.getColor(
                    requireContext(),
                    if (active) android.R.color.holo_green_dark
                    else android.R.color.holo_blue_dark
                )
            )
        }

        Log.d(TAG, "‚úÖ Safe zone button updated: text='${binding.buttonZonaSegura.text}'")
    }


    private fun updateDeviceInfoUI(info: String) {
        binding.textDeviceInfo.apply {
            text = info
            visibility = View.VISIBLE
        }
    }

    // ============ FUNCIONES DE DISPOSITIVO OPTIMIZADAS ============
    private fun updateStatusUI(message: String, colorResId: Int? = null) {
        // ‚úÖ VERIFICAR QUE BINDING NO SEA NULL Y FRAGMENT EST√â ACTIVO
        if (!isAdded || _binding == null || !isResumed) {
            Log.w(TAG, "Fragment not ready for UI update, skipping: $message")
            return
        }

        try {
            // ‚úÖ USAR EL TextView QUE S√ç EXISTE
            binding.textDeviceStatus.text = message
            binding.textDeviceStatus.visibility = View.VISIBLE

            colorResId?.let {
                binding.textDeviceStatus.setTextColor(
                    ContextCompat.getColor(requireContext(), it)
                )
            }
            Log.d(TAG, "‚úÖ Status updated: $message")
        } catch (e: Exception) {
            Log.e(TAG, "Error updating status UI: ${e.message}")
        }
    }
    private fun startPeriodicStatusCheck() {
        if (!hasAssociatedDevice()) return

        cancelStatusCheck()

        statusCheckRunnable = object : Runnable {
            override fun run() {
                if (isAdded && hasAssociatedDevice()) {
                    // USAR EL UNIQUE_ID REAL DE LAS PREFERENCIAS
                    val deviceUniqueId = sharedPreferences.getString(DEVICE_UNIQUE_ID_PREF, null)
                    if (!deviceUniqueId.isNullOrEmpty()) {
                        Log.d(TAG, "üîÑ Automatic status check for REAL device: $deviceUniqueId")

                        viewModel.checkDeviceStatus(deviceUniqueId) { isOnline, message ->
                            val statusIcon = if (isOnline) "üü¢" else "üî¥"
                            val displayMessage = "$statusIcon ${message.substringAfter(" ")}"

                            updateStatusUI(
                                displayMessage,
                                if (isOnline) android.R.color.holo_green_dark
                                else android.R.color.holo_red_dark
                            )

                            Log.d(TAG, "üìä Automatic status updated: $displayMessage")
                        }
                    } else {
                        Log.w(TAG, "‚ö†Ô∏è No deviceUniqueId found for status check")
                    }
                }
                handler.postDelayed(this, STATUS_CHECK_INTERVAL)
            }
        }

        // Ejecutar inmediatamente la primera vez, luego cada 30 segundos
        handler.post(statusCheckRunnable!!)
        Log.d(TAG, "‚úÖ Periodic status check started")
    }



    private fun cancelStatusCheck() {
        statusCheckRunnable?.let { handler.removeCallbacks(it) }
        statusCheckRunnable = null
    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun enterSafeZoneSetupMode() {
        if (!hasAssociatedDevice()) {
            showSnackbar("Asocia un veh√≠culo primero", Snackbar.LENGTH_SHORT)
            return
        }

        // USAR SIEMPRE EL UNIQUE_ID REAL
        val deviceUniqueId = sharedPreferences.getString(DEVICE_UNIQUE_ID_PREF, null)
        if (deviceUniqueId != null) {
            establishSafeZoneForDevice(deviceUniqueId)
        } else {
            showSnackbar("‚ùå No se encontr√≥ dispositivo asociado", Snackbar.LENGTH_SHORT)
        }
    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun establishSafeZoneForDevice(deviceIdString: String) {
        if (JWT_TOKEN.isNullOrEmpty()) {
            showSnackbar("Token de autenticaci√≥n faltante. Inicia sesi√≥n nuevamente.", Snackbar.LENGTH_LONG)
            handleUnauthorizedError()
            return
        }
        // USAR SIEMPRE EL UNIQUE_ID REAL DE LAS PREFERENCIAS
        val deviceUniqueId = sharedPreferences.getString(DEVICE_UNIQUE_ID_PREF, null)
        if (deviceUniqueId == null) {
            showSnackbar("‚ùå No se encontr√≥ ID √∫nico del dispositivo", Snackbar.LENGTH_SHORT)
            return
        }

        Log.d(TAG, "üõ°Ô∏è Establishing safe zone for REAL uniqueId: $deviceUniqueId")

        binding.buttonZonaSegura.apply {
            text = "Obteniendo ubicaci√≥n del veh√≠culo..."  // ‚úÖ Usar text directamente
            isEnabled = false
        }
        lifecycleScope.launch {
            try {
                // Usar uniqueId REAL para obtener posici√≥n
                val position = viewModel.getLastPosition(deviceUniqueId)
                val geoPoint = GeoPoint(position.latitude, position.longitude)

                // Enviar al servidor usando uniqueId REAL
                viewModel.sendSafeZoneToServer(
                    position.latitude,
                    position.longitude,
                    deviceUniqueId
                )

                // Actualizar UI y cach√©
                safeZone = geoPoint
                safeZoneCache.set(geoPoint)
                updateSafeZoneUI(geoPoint)

                // Guardar en preferencias
                sharedPreferences.edit {
                    putString(PREF_SAFEZONE_LAT, position.latitude.toString())
                    putString(PREF_SAFEZONE_LON, position.longitude.toString())
                }

                // Confirmar con el servidor
                viewModel.fetchSafeZoneFromServer()

                binding.buttonZonaSegura.apply {
                    text = "Zona Segura Activa ‚úì"
                    isEnabled = true
                }

                Log.d(TAG, "‚úÖ Safe zone established successfully for uniqueId: $deviceUniqueId")

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Failed to establish safe zone for uniqueId: $deviceUniqueId", e)
                showSnackbar("Fallo al establecer zona segura: ${e.message}", Snackbar.LENGTH_LONG)
                binding.buttonZonaSegura.apply {
                    text = "Establecer Zona Segura"
                    isEnabled = true
                }
            }
        }
    }

    private fun toggleSafeZone() {
        if (JWT_TOKEN.isNullOrEmpty()) {
            showSnackbar("Token de autenticaci√≥n faltante. Inicia sesi√≥n nuevamente.", Snackbar.LENGTH_LONG)
            handleUnauthorizedError()
            return
        }

        Log.d(TAG, "üõ°Ô∏è Toggling safe zone - current state: ${safeZoneCenter != null}")

        // Mostrar di√°logo de confirmaci√≥n para eliminaci√≥n
        MaterialAlertDialogBuilder(requireContext())
            .setTitle("Eliminar Zona Segura")
            .setMessage("¬øEst√°s seguro de que quieres eliminar la zona segura actual? Esta acci√≥n no se puede deshacer.")
            .setPositiveButton("S√≠, eliminar") { _, _ ->
                performSafeZoneDeletion()
            }
            .setNegativeButton("Cancelar", null)
            .show()
    }

    private fun performSafeZoneDeletion() {
        binding.buttonZonaSegura.apply {
            text = "Eliminando zona segura..."
            isEnabled = false
        }

        viewModel.deleteSafeZoneFromServer { success ->
            lifecycleScope.launch(Dispatchers.Main) {
                if (success) {
                    Log.d(TAG, "‚úÖ Safe zone deletion confirmed by server")

                    // Limpiar completamente
                    safeZone = null
                    safeZoneCenter = null
                    safeZoneCache.clear()

                    // Remover pol√≠gono del mapa
                    safeZonePolygon.get()?.let {
                        map?.overlays?.remove(it)
                        Log.d(TAG, "üóëÔ∏è Removed safe zone polygon from map")
                    }
                    safeZonePolygon.set(null)

                    // Limpiar preferencias
                    sharedPreferences.edit {
                        remove(PREF_SAFEZONE_LAT)
                        remove(PREF_SAFEZONE_LON)
                    }

                    // Actualizar estado del veh√≠culo a normal
                    vehicleMarker.get()?.let { marker ->
                        currentVehicleState = VehicleState.NORMAL
                        updateMarkerIcon(marker, VehicleState.NORMAL)
                    }

                    // Actualizar UI
                    updateSafeZoneButton(false)

                    binding.buttonZonaSegura.apply {
                        text = "Establecer Zona Segura"
                        isEnabled = true
                    }

                    showSnackbar("‚úÖ Zona segura eliminada correctamente", Snackbar.LENGTH_SHORT)

                    // Forzar actualizaci√≥n del ViewModel
                    viewModel.fetchSafeZoneFromServer()

                    map?.postInvalidate()

                } else {
                    Log.e(TAG, "‚ùå Failed to delete safe zone")

                    binding.buttonZonaSegura.apply {
                        text = "Zona Segura Activa ‚úì"
                        isEnabled = true
                    }

                    showSnackbar("‚ùå Error al eliminar zona segura. Intenta nuevamente.", Snackbar.LENGTH_LONG)
                }
            }
        }
    }

    // ============ CENTRADO MEJORADO EN MI UBICACI√ìN ============
    @SuppressLint("MissingPermission")
    private fun centerOnMyLocation() {
        if (!hasLocationPermission()) {
            showSnackbar("‚ö†Ô∏è Se necesitan permisos de ubicaci√≥n", Snackbar.LENGTH_SHORT)
            return
        }

        // Desactivar seguimiento del veh√≠culo al centrar en mi ubicaci√≥n
        isFollowingVehicle.set(false)
        updateFollowButtonText()

        myLocationOverlay?.myLocation?.let { location ->
            val myPosition = GeoPoint(location.latitude, location.longitude)
            map?.controller?.animateTo(myPosition, 18.0, 1200L)
            showSnackbar("üìç Centrado en tu ubicaci√≥n", Snackbar.LENGTH_SHORT)
            Log.d(TAG, "üìç Manually centered on user location - vehicle following disabled")
        } ?: run {
            showSnackbar("‚ö†Ô∏è Ubicaci√≥n no disponible", Snackbar.LENGTH_SHORT)
            Log.w(TAG, "‚ö†Ô∏è User location not available for centering")
        }
    }


    private fun loadSafeZone() {
        // Primero del cache
        safeZoneCache.get()?.let {
            safeZone = it
            updateSafeZoneUI(it)
            return
        }

        // Luego de preferencias
        val lat = sharedPreferences.getString(PREF_SAFEZONE_LAT, null)?.toDoubleOrNull()
        val lon = sharedPreferences.getString(PREF_SAFEZONE_LON, null)?.toDoubleOrNull()

        if (lat != null && lon != null) {
            val geoPoint = GeoPoint(lat, lon)
            safeZone = geoPoint
            safeZoneCache.set(geoPoint)
            updateSafeZoneUI(geoPoint)
        }
    }

    // ============ DIALOGS OPTIMIZADOS ============

    @RequiresApi(Build.VERSION_CODES.O)
    private fun showAssociateDeviceDialog() {
        if (JWT_TOKEN.isNullOrEmpty()) {
            showSnackbar("Token de autenticaci√≥n faltante. Inicia sesi√≥n nuevamente.", Snackbar.LENGTH_LONG)
            handleUnauthorizedError()
            return
        }

        val dialogView = LayoutInflater.from(requireContext())
            .inflate(R.layout.dialog_associate_device, null)

        MaterialAlertDialogBuilder(requireContext())
            .setTitle("Asociar Veh√≠culo")
            .setMessage("Ingresa el ID √∫nico del dispositivo GPS")
            .setView(dialogView)
            .setPositiveButton("Asociar") { _, _ ->
                val deviceUniqueId = dialogView.findViewById<EditText>(R.id.editDeviceId)
                    .text.toString().trim()
                val deviceName = dialogView.findViewById<EditText>(R.id.editDeviceName)
                    .text.toString().trim()

                if (deviceUniqueId.isNotEmpty() && deviceName.isNotEmpty()) {
                    associateDevice(deviceUniqueId, deviceName)
                } else {
                    showSnackbar("Ingresa un ID √∫nico y nombre v√°lidos", Snackbar.LENGTH_SHORT)
                }
            }
            .setNeutralButton("Ver Dispositivos") { _, _ ->
                viewModel.showAvailableDevices { devices ->
                    MaterialAlertDialogBuilder(requireContext())
                        .setTitle("Dispositivos Disponibles")
                        .setMessage(if (devices.isEmpty()) "No se encontraron dispositivos" else devices)
                        .setPositiveButton("OK", null)
                        .show()
                }
            }
            .setNegativeButton("Cancelar", null)
            .show()
    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun associateDevice(deviceUniqueId: String, deviceName: String) {
        Log.d(TAG, "Asociando dispositivo: uniqueId=$deviceUniqueId, name=$deviceName")

        viewModel.associateDevice(deviceUniqueId, deviceName) { deviceId, name ->
            // Clear all relevant caches
            deviceInfoCache.clear()
            lastPositionCache.clear()

            // Update UI immediately
            val info = "Dispositivo: $name (ID: $deviceId)"
            deviceInfoCache.set(info)
            updateDeviceInfoUI(info)
            viewModel.forceDataRefresh()
            // Force refresh all data
            lifecycleScope.launch {
                delay(500) // Small delay to ensure caches are cleared

                // Reinitialize everything
                supervisorScope {
                    launch { setupWebSocket() }
                    launch { startTrackingService() }
                    launch { fetchInitialPosition() }
                    launch { viewModel.fetchSafeZoneFromServer() }
                    launch { checkDeviceStatus() }
                }
            }
        }
    }
    // Fix en createWebSocketListener con mejor manejo de mensajes
    private fun createWebSocketListener(deviceUniqueId: String) = object : WebSocketListener() {
        override fun onOpen(webSocket: WebSocket, response: Response) {
            Log.d(TAG, "üîó WebSocket conectado!")

            // Enviar PING inmediato para verificar
            val pingMessage = JSONObject().apply {
                put("type", "PING")
                put("timestamp", System.currentTimeMillis())
            }

            webSocket.send(pingMessage.toString())
            Log.d(TAG, "üì§ PING enviado al servidor")
        }

        @RequiresApi(Build.VERSION_CODES.O)
        override fun onMessage(webSocket: WebSocket, text: String) {
            Log.d(TAG, "üì® WebSocket message received: ${text.take(100)}...")

            try {
                val json = JSONObject(text)
                val type = json.getString("type")

                Log.d(TAG, "üìã Message type: $type")

                when (type) {
                    "POSITION_UPDATE" -> {
                        Log.d(TAG, "üìç Processing position update")
                        handlePositionUpdate(json, deviceUniqueId)
                    }
                    "CONNECTION_CONFIRMED" -> {
                        Log.d(TAG, "‚úÖ Connection confirmed")
                        lifecycleScope.launch(Dispatchers.Main) {
                            showSnackbar("‚úÖ Conectado y suscrito", Snackbar.LENGTH_SHORT)
                        }
                    }
                    "SUBSCRIBE_DEVICE" -> {
                        Log.d(TAG, "üîî Device subscription confirmed")
                    }
                    "ERROR" -> {
                        val errorMsg = json.optString("message", "Error desconocido")
                        Log.e(TAG, "‚ùå WebSocket error: $errorMsg")
                        lifecycleScope.launch(Dispatchers.Main) {
                            showSnackbar("‚ùå Error: $errorMsg", Snackbar.LENGTH_LONG)
                        }
                    }
                    else -> {
                        Log.d(TAG, "‚ùì Unknown message type: $type")
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error processing WebSocket message: ${e.message}", e)
                Log.e(TAG, "‚ùå Raw message: $text")
            }
        }

        override fun onFailure(webSocket: WebSocket, t: Throwable, response: Response?) {
            Log.e(TAG, "‚ùå WebSocket failure: ${t.message}")
            Log.e(TAG, "‚ùå Response: ${response?.code} - ${response?.message}")

            lifecycleScope.launch(Dispatchers.Main) {
                updateStatusUI("üî¥ Conexi√≥n perdida", android.R.color.holo_red_dark)
                showSnackbar("‚ùå Conexi√≥n perdida - Reintentando...", Snackbar.LENGTH_SHORT)
            }

            if (shouldReconnect.get() && isAdded) {
                scheduleReconnect()
            }
        }

        override fun onClosed(webSocket: WebSocket, code: Int, reason: String) {
            Log.d(TAG, "üîê WebSocket cerrado: $code - $reason")

            lifecycleScope.launch(Dispatchers.Main) {
                updateStatusUI("üî¥ Desconectado", android.R.color.holo_red_dark)
            }

            if (shouldReconnect.get() && isAdded && code != 1000) {
                scheduleReconnect()
            }
        }
    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun showTraccarClientConfig() {
        if (JWT_TOKEN.isNullOrEmpty()) {
            showSnackbar("Token de autenticaci√≥n faltante. Inicia sesi√≥n nuevamente.", Snackbar.LENGTH_LONG)
            handleUnauthorizedError()
            return
        }

        val deviceId = sharedPreferences.getInt(DEVICE_ID_PREF, -1)
        val deviceUniqueId = sharedPreferences.getString(DEVICE_UNIQUE_ID_PREF, null)

        if (deviceId == -1 || deviceUniqueId == null) {
            showSnackbar("Asocia un dispositivo primero desde 'Asociar Veh√≠culo'", Snackbar.LENGTH_LONG)
            return
        }

        viewModel.getGPSClientConfig { recommendedEndpoint, endpoints, instructions ->
            val configText = buildString {
                appendLine("üì± Configuraci√≥n del Cliente GPS:")
                appendLine("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                appendLine()
                appendLine("üîó URL DEL SERVIDOR RECOMENDADA:")
                appendLine("$recommendedEndpoint")
                appendLine()
                appendLine("üìã CONFIGURACI√ìN DEL DISPOSITIVO:")
                appendLine("ID del Dispositivo: $deviceUniqueId")
                appendLine("Protocolo: ${instructions["protocol"] ?: "HTTP GET/POST"}")
                appendLine("Par√°metros: ${instructions["parameters"] ?: "id, lat, lon, timestamp, speed"}")
                appendLine("Frecuencia: 5 segundos")
                appendLine("Distancia: 10 metros")
                appendLine()
                appendLine("üåê ENDPOINTS ALTERNATIVOS:")
                endpoints.forEach { (name, url) ->
                    appendLine("‚Ä¢ ${name.uppercase()}: $url")
                }
                appendLine()
                appendLine("üì± PARA LA APLICACI√ìN TRACCAR CLIENT:")
                appendLine("1. Instala Traccar Client desde Play Store")
                appendLine("2. URL del Servidor: $recommendedEndpoint")
                appendLine("3. ID del Dispositivo: $deviceUniqueId")
                appendLine("4. Habilita permisos de ubicaci√≥n")
                appendLine("5. Inicia el servicio")
                appendLine()
                appendLine("üîß PARA DISPOSITIVOS GPS PERSONALIZADOS:")
                appendLine("Env√≠a solicitudes HTTP GET/POST a:")
                appendLine("$recommendedEndpoint")
                appendLine("Par√°metros: ${instructions["parameters"] ?: "id, lat, lon, timestamp, speed"}")
                appendLine()
                appendLine("üì° EJEMPLO DE SOLICITUD:")
                appendLine(instructions["example"] ?: "GET $recommendedEndpoint?id=$deviceUniqueId&lat=-37.32167&lon=-59.13316&timestamp=${java.time.Instant.now()}&speed=0")
                appendLine()
                appendLine("‚úÖ VERIFICA LA CONEXI√ìN:")
                appendLine("Usa el bot√≥n 'Estado del Dispositivo' para comprobar si se reciben datos")
            }

            MaterialAlertDialogBuilder(requireContext())
                .setTitle("Gu√≠a de Configuraci√≥n de Dispositivo GPS")
                .setMessage(configText)
                .setPositiveButton("Copiar URL del Servidor") { _, _ ->
                    copyToClipboard("URL del Servidor", recommendedEndpoint)
                    showSnackbar("‚úÖ ¬°URL del servidor copiada!", Snackbar.LENGTH_SHORT)
                }
                .setNeutralButton("Probar URL") { _, _ ->
                    val testUrl = instructions["example"] ?:
                    "$recommendedEndpoint?id=$deviceUniqueId&lat=-37.32167&lon=-59.13316&timestamp=${java.time.Instant.now()}&speed=0"
                    openInBrowser(testUrl)
                }
                .setNegativeButton("Cerrar", null)
                .show()
        }
    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun showOfflineHelpDialog() {
        MaterialAlertDialogBuilder(requireContext())
            .setTitle("üî¥ Dispositivo Fuera de L√≠nea - Soluci√≥n de Problemas")
            .setMessage(buildString {
                appendLine("Tu dispositivo GPS no est√° enviando datos. Aqu√≠ tienes c√≥mo solucionarlo:")
                appendLine()
                appendLine("‚úÖ VERIFICA ESTOS PUNTOS:")
                appendLine("1. El dispositivo GPS/aplicaci√≥n est√° funcionando")
                appendLine("2. Los permisos de ubicaci√≥n est√°n habilitados")
                appendLine("3. La conexi√≥n a internet est√° activa")
                appendLine("4. La URL del servidor est√° configurada correctamente")
                appendLine("5. El ID del dispositivo coincide exactamente")
                appendLine()
                appendLine("üîß PR√ìXIMOS PASOS:")
                appendLine("‚Ä¢ Usa 'Mostrar Configuraci√≥n del Cliente GPS' para la configuraci√≥n")
                appendLine("‚Ä¢ Prueba la URL en tu navegador")
                appendLine("‚Ä¢ Revisa la configuraci√≥n de la aplicaci√≥n GPS")
                appendLine("‚Ä¢ Reinicia el servicio de rastreo GPS")
            })
            .setPositiveButton("Mostrar Configuraci√≥n") { _, _ ->
                showTraccarClientConfig()
            }
            .setNegativeButton("OK", null)
            .show()
    }
    // ============ FIX 2: Nueva funci√≥n para obtener el uniqueId correcto ============
    private fun getDeviceUniqueId(): String? {
        return sharedPreferences.getString(DEVICE_UNIQUE_ID_PREF, null)
    }

    private fun hasLocationPermission(): Boolean {
        return ContextCompat.checkSelfPermission(
            requireContext(),
            Manifest.permission.ACCESS_FINE_LOCATION
        ) == android.content.pm.PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(
                    requireContext(),
                    Manifest.permission.ACCESS_COARSE_LOCATION
                ) == android.content.pm.PackageManager.PERMISSION_GRANTED
    }

    // ============ UTILIDADES OPTIMIZADAS ============

    private fun shouldUpdatePosition(): Boolean {
        val now = System.currentTimeMillis()
        return (now - lastPositionUpdate.get()) >= POSITION_UPDATE_THROTTLE
    }

    private fun showSnackbar(message: String, duration: Int) {
        if (isAdded && view != null) {
            Snackbar.make(binding.root, message, duration).show()
        }
    }
    // Fix en loadDeviceInfo para refresh completo
    private fun loadDeviceInfo() {
        Log.d(TAG, "Loading device info...")

        // Siempre refresh desde el servidor en lugar de cache
        viewModel.fetchAssociatedDevices()

        // Tambi√©n verificar preferencias como fallback
        if (hasAssociatedDevice()) {
            val deviceId = sharedPreferences.getInt(DEVICE_ID_PREF, -1)
            val deviceName = sharedPreferences.getString(DEVICE_NAME_PREF, null)
            val info = "Dispositivo: $deviceName (ID: $deviceId)"
            updateDeviceInfoUI(info)

            Log.d(TAG, "Device info loaded from preferences: $info")
        } else {
            updateDeviceInfoUI("No hay dispositivos asociados")
            Log.d(TAG, "No device found in preferences")
        }
    }

    private fun copyToClipboard(label: String, text: String) {
        val clipboard = requireContext().getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
        val clip = ClipData.newPlainText(label, text)
        clipboard.setPrimaryClip(clip)
    }

    private fun openInBrowser(url: String) {
        try {
            startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(url)))
            showSnackbar("üåê Abriendo URL de prueba en el navegador", Snackbar.LENGTH_SHORT)
        } catch (e: Exception) {
            showSnackbar("‚ùå No hay navegador disponible", Snackbar.LENGTH_SHORT)
        }
    }

    private fun logout() {
        shouldReconnect.set(false)
        cancelStatusCheck()
        cancelReconnect()
        handler.removeCallbacksAndMessages(null)
        webSocket?.close(1000, "Fragment destruido")
        webSocket = null

        sharedPreferences.edit {
            remove("jwt_token")
            remove("user_email")
            remove(DEVICE_ID_PREF)
            remove(DEVICE_NAME_PREF)
            remove(DEVICE_UNIQUE_ID_PREF)
            remove(PREF_SAFEZONE_LAT)
            remove(PREF_SAFEZONE_LON)
            apply()
        }

        findNavController().navigate(R.id.action_SecondFragment_to_FirstFragment)
        Log.d(TAG, "Usuario cerr√≥ sesi√≥n y preferencias limpiadas")
    }

    // REEMPLAZAR handleUnauthorizedError POR ESTA VERSI√ìN
    private fun handleUnauthorizedError() {
        Log.d(TAG, "üîÑ Handling unauthorized error - attempting token refresh")

        // ‚úÖ SOLO INTENTAR REFRESH - NO ELIMINAR NADA A√öN
        refreshJWTToken()
    }
    // ============ ZONA SEGURA OPTIMIZADA ============
    @RequiresApi(Build.VERSION_CODES.O)
    private fun handleSafeZoneButton() {
        Log.d(TAG, "üõ°Ô∏è Bot√≥n zona segura presionado - Estado actual: safeZone=${safeZone != null}")

        if (safeZone == null || !isSafeZoneActive()) {
            // ‚úÖ NO HAY ZONA SEGURA - CREAR NUEVA
            enterSafeZoneSetupMode()
        } else {
            // ‚úÖ HAY ZONA SEGURA ACTIVA - MOSTRAR OPCIONES
            showSafeZoneOptionsDialog()
        }
    }
    @RequiresApi(Build.VERSION_CODES.O)
    private fun showSafeZoneOptionsDialog() {
        MaterialAlertDialogBuilder(requireContext())
            .setTitle("üõ°Ô∏è Zona Segura Activa")
            .setMessage("¬øQu√© quieres hacer con la zona segura actual?")
            .setPositiveButton("‚úèÔ∏è Reconfigurar Aqu√≠") { _, _ ->
                // ‚úÖ ESTABLECER NUEVA ZONA EN POSICI√ìN ACTUAL DEL VEH√çCULO
                reconfigureSafeZoneAtVehiclePosition()
            }
            .setNeutralButton("üìç Reconfigurar en Mi Ubicaci√≥n") { _, _ ->
                // ‚úÖ ESTABLECER NUEVA ZONA EN UBICACI√ìN DEL USUARIO
                reconfigureSafeZoneAtMyLocation()
            }
            .setNegativeButton("üóëÔ∏è Desactivar Zona") { _, _ ->
                // ‚úÖ CONFIRMAR ELIMINACI√ìN
                showDeleteSafeZoneConfirmation()
            }
            .show()
    }
    /**
     * ‚úÖ RECONFIGURAR ZONA EN POSICI√ìN DEL VEH√çCULO
     */
    @RequiresApi(Build.VERSION_CODES.O)
    private fun reconfigureSafeZoneAtVehiclePosition() {
        val deviceUniqueId = sharedPreferences.getString(DEVICE_UNIQUE_ID_PREF, null)
        if (deviceUniqueId == null) {
            showSnackbar("‚ùå No hay dispositivo asociado", Snackbar.LENGTH_SHORT)
            return
        }

        Log.d(TAG, "üîÑ Reconfigurando zona segura en posici√≥n del veh√≠culo")

        // ‚úÖ UI FEEDBACK INMEDIATO
        updateSafeZoneButtonText("üîÑ Obteniendo posici√≥n del veh√≠culo...")
        binding.buttonZonaSegura.isEnabled = false

        lifecycleScope.launch {
            try {
                val position = viewModel.getLastPosition(deviceUniqueId)
                val geoPoint = GeoPoint(position.latitude, position.longitude)

                // ‚úÖ CONFIRMAR CON EL USUARIO
                showConfirmNewSafeZone(geoPoint, "posici√≥n del veh√≠culo") { confirmed ->
                    if (confirmed) {
                        establishSafeZoneAt(geoPoint, deviceUniqueId)
                    } else {
                        restoreSafeZoneButton()
                    }
                }

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error obteniendo posici√≥n del veh√≠culo", e)
                showSnackbar("‚ùå Error: ${e.message}", Snackbar.LENGTH_LONG)
                restoreSafeZoneButton()
            }
        }
    }
    /**
     * ‚úÖ RECONFIGURAR ZONA EN UBICACI√ìN DEL USUARIO
     */
    @RequiresApi(Build.VERSION_CODES.O)
    @SuppressLint("MissingPermission")
    private fun reconfigureSafeZoneAtMyLocation() {
        if (!hasLocationPermission()) {
            showSnackbar("‚ùå Se necesitan permisos de ubicaci√≥n", Snackbar.LENGTH_SHORT)
            return
        }

        val deviceUniqueId = sharedPreferences.getString(DEVICE_UNIQUE_ID_PREF, null)
        if (deviceUniqueId == null) {
            showSnackbar("‚ùå No hay dispositivo asociado", Snackbar.LENGTH_SHORT)
            return
        }

        Log.d(TAG, "üìç Reconfigurando zona segura en mi ubicaci√≥n")

        // ‚úÖ UI FEEDBACK
        updateSafeZoneButtonText("üìç Obteniendo tu ubicaci√≥n...")
        binding.buttonZonaSegura.isEnabled = false

        // ‚úÖ OBTENER UBICACI√ìN ACTUAL DEL USUARIO
        fusedLocationClient.lastLocation
            .addOnSuccessListener { location ->
                if (location != null) {
                    val geoPoint = GeoPoint(location.latitude, location.longitude)

                    showConfirmNewSafeZone(geoPoint, "tu ubicaci√≥n actual") { confirmed ->
                        if (confirmed) {
                            establishSafeZoneAt(geoPoint, deviceUniqueId)
                        } else {
                            restoreSafeZoneButton()
                        }
                    }
                } else {
                    showSnackbar("‚ùå No se pudo obtener tu ubicaci√≥n", Snackbar.LENGTH_SHORT)
                    restoreSafeZoneButton()
                }
            }
            .addOnFailureListener { e ->
                Log.e(TAG, "‚ùå Error obteniendo ubicaci√≥n del usuario", e)
                showSnackbar("‚ùå Error obteniendo ubicaci√≥n: ${e.message}", Snackbar.LENGTH_SHORT)
                restoreSafeZoneButton()
            }
    }
    /**
     * ‚úÖ CONFIRMAR NUEVA ZONA SEGURA CON PREVIEW
     */
    private fun showConfirmNewSafeZone(
        position: GeoPoint,
        locationDescription: String,
        callback: (Boolean) -> Unit
    ) {
        val distanceFromCurrent = safeZone?.let { current ->
            calculateAccurateDistance(current, position)
        } ?: 0.0

        val message = buildString {
            appendLine("Nueva zona segura en $locationDescription:")
            appendLine()
            appendLine("üìç Coordenadas:")
            appendLine("   Lat: ${String.format("%.6f", position.latitude)}")
            appendLine("   Lon: ${String.format("%.6f", position.longitude)}")

            if (distanceFromCurrent > 0) {
                appendLine()
                appendLine("üìè Distancia de zona actual: ${String.format("%.0f", distanceFromCurrent)}m")
            }

            appendLine()
            appendLine("‚ö†Ô∏è Esto reemplazar√° la zona segura actual.")
        }

        MaterialAlertDialogBuilder(requireContext())
            .setTitle("üõ°Ô∏è Confirmar Nueva Zona Segura")
            .setMessage(message)
            .setPositiveButton("‚úÖ S√≠, Establecer Aqu√≠") { _, _ ->
                callback(true)
            }
            .setNegativeButton("‚ùå Cancelar") { _, _ ->
                callback(false)
            }
            .setCancelable(false)
            .show()
    }
    /**
     * ‚úÖ ESTABLECER ZONA SEGURA EN POSICI√ìN ESPEC√çFICA
     */
    @RequiresApi(Build.VERSION_CODES.O)
    private fun establishSafeZoneAt(position: GeoPoint, deviceUniqueId: String) {
        updateSafeZoneButtonText("üîÑ Estableciendo zona segura...")

        lifecycleScope.launch {
            try {
                // ‚úÖ ENVIAR AL SERVIDOR
                viewModel.sendSafeZoneToServer(
                    position.latitude,
                    position.longitude,
                    deviceUniqueId
                )

                // ‚úÖ ACTUALIZAR LOCALMENTE
                safeZone = position
                safeZoneCache.set(position)
                updateSafeZoneUI(position)

                // ‚úÖ GUARDAR EN PREFERENCIAS
                sharedPreferences.edit {
                    putString(PREF_SAFEZONE_LAT, position.latitude.toString())
                    putString(PREF_SAFEZONE_LON, position.longitude.toString())
                }

                // ‚úÖ CENTRAR MAPA EN NUEVA ZONA (SIN AFECTAR SEGUIMIENTO DE VEH√çCULO)
                if (!isFollowingVehicle.get()) {
                    map?.controller?.animateTo(position, 17.0, 1000L)
                }

                // ‚úÖ CONFIRMACI√ìN
                showSnackbar("‚úÖ Nueva zona segura establecida", Snackbar.LENGTH_LONG)
                updateSafeZoneButtonText("üõ°Ô∏è Zona Segura Activa ‚úì")
                binding.buttonZonaSegura.isEnabled = true

                Log.d(TAG, "‚úÖ Zona segura reconfigurada: lat=${position.latitude}, lon=${position.longitude}")

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error estableciendo nueva zona segura", e)
                showSnackbar("‚ùå Error: ${e.message}", Snackbar.LENGTH_LONG)
                restoreSafeZoneButton()
            }
        }
    }

    /**
     * ‚úÖ CONFIRMACI√ìN DE ELIMINACI√ìN M√ÅS CLARA
     */
    private fun showDeleteSafeZoneConfirmation() {
        MaterialAlertDialogBuilder(requireContext())
            .setTitle("‚ö†Ô∏è Eliminar Zona Segura")
            .setMessage("¬øEst√°s COMPLETAMENTE SEGURO de que quieres eliminar la zona segura?\n\n" +
                    "ESTO SIGNIFICA:\n" +
                    "‚Ä¢ NO habr√° m√°s alertas de seguridad\n" +
                    "‚Ä¢ El veh√≠culo podr√° moverse libremente sin avisos\n" +
                    "‚Ä¢ Tendr√°s que configurar una nueva zona manualmente\n\n" +
                    "‚ö†Ô∏è Solo hazlo si realmente no necesitas el monitoreo.")
            .setPositiveButton("üóëÔ∏è S√ç, ELIMINAR COMPLETAMENTE") { _, _ ->
                performSafeZoneDeletion()
            }
            .setNeutralButton("üîá SOLO SILENCIAR ALARMAS") { _, _ ->
                temporarilySilenceAlerts()
            }
            .setNegativeButton("‚ùå Cancelar") { _, _ ->
                // No hacer nada
            }
            .setCancelable(true)
            .show()
    }

    /**
     * ‚úÖ SILENCIAR TEMPORALMENTE (NUEVA OPCI√ìN)
     */
    private fun temporarilySilenceAlerts() {
        // ‚úÖ GUARDAR ESTADO DE "SILENCIADO TEMPORALMENTE"
        sharedPreferences.edit {
            putLong("alerts_silenced_until", System.currentTimeMillis() + (60 * 60 * 1000)) // 1 hora
        }

        // ‚úÖ ENVIAR BROADCAST PARA SILENCIAR ALARMAS ACTIVAS
        val intent = Intent("com.peregrino.SILENCE_ALERTS_TEMPORARILY")
        requireContext().sendBroadcast(intent)

        showSnackbar("üîá Alertas silenciadas por 1 hora - Zona segura sigue activa", Snackbar.LENGTH_LONG)
        updateSafeZoneButtonText("üõ°Ô∏è Zona Activa (Silenciada 1h)")

        // ‚úÖ RESTAURAR TEXTO DESPU√âS DE 1 HORA
        handler.postDelayed({
            if (isAdded) {
                updateSafeZoneButtonText("üõ°Ô∏è Zona Segura Activa ‚úì")
                showSnackbar("üîî Alertas de zona segura reactivadas", Snackbar.LENGTH_SHORT)
            }
        }, 60 * 60 * 1000)
    }

    /**
     * ‚úÖ FUNCIONES AUXILIARES PARA UI
     */
    private fun updateSafeZoneButtonText(text: String) {
        binding.buttonZonaSegura.text = text
        binding.buttonZonaSeguraMain.text = text
    }

    private fun restoreSafeZoneButton() {
        binding.buttonZonaSegura.isEnabled = true
        binding.buttonZonaSeguraMain.isEnabled = true
        updateSafeZoneButtonText(
            if (safeZone != null) "üõ°Ô∏è Zona Segura Activa ‚úì"
            else "üõ°Ô∏è Establecer Zona Segura"
        )
    }

    private fun isSafeZoneActive(): Boolean {
        // ‚úÖ VERIFICAR SI LA ZONA EST√Å REALMENTE ACTIVA
        val hasCoordinates = safeZone != null
        val hasSavedZone = sharedPreferences.contains(PREF_SAFEZONE_LAT) &&
                sharedPreferences.contains(PREF_SAFEZONE_LON)

        return hasCoordinates || hasSavedZone
    }

    // ‚úÖ TAMBI√âN AGREGAR ESTA PROPIEDAD AL INICIO DE LA CLASE
    private lateinit var fusedLocationClient: FusedLocationProviderClient

    // ‚úÖ Y ESTA INICIALIZACI√ìN EN onViewCreated() DESPU√âS DE setupMap()
    private fun initializeFusedLocationClient() {
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())
    }

// ============ BROADCAST RECEIVER PARA DETECTAR CUANDO SE DESACTIVA LA ZONA ============

    private val safeZoneReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            when (intent?.action) {
                "com.peregrino.SAFEZONE_DISABLED" -> {
                    Log.d(TAG, "üõ°Ô∏è Zona segura desactivada desde servicio")

                    // ‚úÖ ACTUALIZAR UI
                    safeZone = null
                    safeZoneCache.clear()

                    // ‚úÖ REMOVER POL√çGONO DEL MAPA
                    safeZonePolygon.get()?.let {
                        map?.overlays?.remove(it)
                    }
                    safeZonePolygon.set(null)

                    // ‚úÖ ACTUALIZAR BOT√ìN
                    updateSafeZoneButton(false)
                    updateSafeZoneButtonText("üõ°Ô∏è Establecer Zona Segura")

                    map?.postInvalidate()

                    // ‚úÖ MOSTRAR CONFIRMACI√ìN
                    showSnackbar("üõ°Ô∏è Zona segura desactivada desde alarma", Snackbar.LENGTH_LONG)
                }

                "com.peregrino.SAFEZONE_ALERT" -> {
                    val distance = intent.getDoubleExtra("distance", 0.0)
                    Log.w(TAG, "üö® Alerta recibida desde servicio: ${distance}m")

                    // ‚úÖ MOSTRAR ALERTA EN LA APP (SI EST√Å ABIERTA)
                    lifecycleScope.launch(Dispatchers.Main) {
                        showSnackbar(
                            "üö® VEH√çCULO FUERA DE ZONA: ${distance.toInt()}m",
                            Snackbar.LENGTH_LONG
                        )
                    }
                }
            }
        }
    }

    // ============ LIFECYCLE OPTIMIZADO ============

    @SuppressLint("UnspecifiedRegisterReceiverFlag")
    @RequiresApi(Build.VERSION_CODES.O)
    override fun onResume() {
        super.onResume()

        // ===== REANUDAR MAPA PRIMERO =====
        map?.onResume()

        // ===== CONFIGURACI√ìN POST-RESUME =====
        shouldReconnect.set(true)


        // ‚úÖ REGISTRAR RECEIVER con flag expl√≠cito
        val filter = IntentFilter().apply {
            addAction("com.peregrino.SAFEZONE_DISABLED")
            addAction("com.peregrino.SAFEZONE_ALERT")
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            // Para Android 13+ usa RECEIVER_NOT_EXPORTED (recomendado para receivers internos)
            ContextCompat.registerReceiver(
                requireContext(),
                safeZoneReceiver,
                filter,
                ContextCompat.RECEIVER_NOT_EXPORTED
            )
        } else {
            // Para versiones anteriores, usa el m√©todo tradicional
            requireContext().registerReceiver(safeZoneReceiver, filter)
        }


        Log.d(TAG, "‚úÖ SafeZone receiver registrado")
    }

    override fun onPause() {
        super.onPause()

        // ===== PAUSAR MAPA CORRECTAMENTE =====
        map?.onPause()

        // ===== LIMPIEZA NORMAL =====
        shouldReconnect.set(false)
        cancelStatusCheck()
        cancelReconnect()
        handler.removeCallbacksAndMessages(null)
        webSocket?.close(1000, "Fragment pausado")
        webSocket = null

        Log.d(TAG, "‚è∏Ô∏è Fragment pausado - mapa pausado correctamente")
        // ‚úÖ DESREGISTRAR RECEIVER
        try {
            requireContext().unregisterReceiver(safeZoneReceiver)
            Log.d(TAG, "‚úÖ SafeZone receiver desregistrado")
        } catch (e: Exception) {
            Log.w(TAG, "Receiver ya desregistrado: ${e.message}")
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()

        // Limpieza completa incluyendo nuevas variables
        shouldReconnect.set(false)
        isFollowingVehicle.set(false)
        safeZoneCenter = null
        currentVehicleState = VehicleState.NORMAL

        cancelStatusCheck()
        cancelReconnect()
        handler.removeCallbacksAndMessages(null)

        // Cerrar WebSocket
        webSocket?.close(1000, "Fragment destruido")
        webSocket = null

        // Detener servicio
        requireContext().stopService(Intent(requireContext(), TrackingService::class.java))

        // Limpiar mapa
        myLocationOverlay?.disableMyLocation()
        myLocationOverlay?.disableFollowLocation()
        map?.overlays?.clear()
        map?.onDetach()

        // Limpiar referencias
        vehicleMarker.set(null)
        safeZonePolygon.set(null)
        myLocationOverlay = null
        map = null

        // Limpiar caches locales
        deviceInfoCache.clear()
        safeZoneCache.clear()
        lastPositionCache.clear()

        _binding = null
        Log.d(TAG, "Vista del fragment destruida")
    }
}
